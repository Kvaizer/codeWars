function expand(expr) {
        let triangle = [
            [1],
            [1, 1],
            [1, 2, 1],
            [1, 3, 3, 1],
            [1, 4, 6, 4, 1],
            [1, 5, 10, 10, 5, 1],
            [1, 6, 15, 20, 15, 6, 1],
            [1, 7, 21, 35, 35, 21, 7, 1],
            [1, 8, 28, 56, 70, 56, 28, 8, 1],
            [1, 9, 36, 84, 126, 126, 84, 36, 9, 1],
            [1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1],
            [1, 11, 55, 165, 330, 462, 462, 330, 165, 55, 11, 1],
            [1, 12, 66, 220, 495, 792, 924, 792, 495, 220, 66, 12, 1],
            [1, 13, 78, 286, 715, 1287, 1716, 1716, 1287, 715, 286, 78, 13, 1],
            [1, 14, 91, 364, 1001, 2002, 3003, 3432, 3003, 2002, 1001, 364, 91, 14, 1],
            [1, 15, 105, 455, 1365, 3003, 5005, 6435, 6435, 5005, 3003, 1365, 455, 105, 15, 1],
        ]
        let operand = '';
        let a = expr.split('^');
        
        if(a[1] == 0) return '1'; //a[1] - степень выражения

        const b = [];
        for(let char of a[0]) {
            b.push(char);
        }
        b.pop();
        b.shift();
        

        let expression;

        let arrOper = b.filter(item => item == '-');
        
        if(arrOper.length > 0) operand = '-';
        else operand = '+';
        

        if(b[0] == '-') b.shift();
        expression = b.join('');
        if(b.includes('-')) expression = expression.split('-');
        if(b.includes('+')) expression = expression.split('+');
        // expression -> array of 2 terms
        if(expression.includes('0')) return `${expression[1 - expression.indexOf('0')][0] ** a[1]}${expression[1 - expression.indexOf('0')][1]}^${a[1]}`;

       
        let var1 = '';
        let con1 = '';
        let con2 = +expression[1];

        if(arrOper.length == 2) con2 = -con2;

        if(expr[1] != '-' && arrOper.length == 1) con2 = -con2;

        

        outer: for(let i = 0; i < expression.length; i++) {
            for(let char of expression[i]) {
                console.log(+char);
                if(!(+char) && char != '0') {
                    var1 = char;
                    break outer;
                } else con1 += char.toString();
            }
        }

        if(con1 == '') con1 = 1;
      
        if(expr[1] == '-') con1 = -(+con1);
        else if(con1 != 0) con1 = +con1;
        else con1 = 1;

        let triangleMember = triangle[a[1]];
        let result = [];
        for(let i = 0; i <= a[1]; i++) {
            let x;
            if(a[1] - i == 1) {
                x = con1 ** (a[1] - i);
                x *= con2 ** i;
                x *= triangleMember[i];
                x += `${var1}`;
                result.push(x);
            }
            if(i != a[1] && a[1] - i != 1) {
                x = con1 ** (a[1] - i);
                x *= con2 ** i;
                x *= triangleMember[i];
                if(x != '1') {
                    x += `${var1}^${a[1] - i}`;
                    result.push(x);
                } else {
                    x = `${var1}^${a[1] - i}`;
                    result.push(x);
                }
            }
            if(i == a[1]) {
                x = con1 ** (a[1] - i);
                x *= con2 ** i;
                x *= triangleMember[i];
                result.push(x.toString());
            }
        }
       
        result = result.map((item, index)=> {
            if(item[0] != '-' && index != 0) item = '+' + item;
            return item;
        })
        result = result.join('');
        if(result[0] == '1' && result[1] == var1) result = result.substr(1);
        if(result[0] == '-' && result[1] == 1 && result[2] == var1) result = '-' + result.substr(2);
        return result;
    }
